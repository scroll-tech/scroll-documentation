---
import { MENU, Frontmatter, getSidebar } from "../../config"
import { localizePath } from "astro-i18next"
import Icon from "../Icons/Icons.astro"

export type Props = {
  currentPage: string
  content: Frontmatter
}
const { currentPage, content } = Astro.props as Props

const SIDEBAR = getSidebar()

// SIDEBAR is a flat array. Group it by sections to properly render.
const sidebarSections = !!SIDEBAR[content?.section] ? SIDEBAR[content?.section] : []
const isExternal = (path: string) => /^(https?:|mailto:|tel:)/.test(path)

const removeSlashes = function (url: string) {
  let sanitizedUrl = url
  if (sanitizedUrl.charAt(0) == "/") sanitizedUrl = sanitizedUrl.substr(1)
  if (sanitizedUrl.charAt(sanitizedUrl.length - 1) == "/")
    sanitizedUrl = sanitizedUrl.substr(0, sanitizedUrl.length - 1)

  return sanitizedUrl
}

const currentPageMatch = removeSlashes(currentPage.slice(1))

const processedSidebarSections = sidebarSections.map((section) => {
  return {
    ...section,
    contents: section.contents.map((child) => {
      const isCurrent = currentPageMatch === removeSlashes(localizePath(child.url))
      return {
        ...child,
        isCurrent: isCurrent,
        open:
          isCurrent ||
          (child.children &&
            child.children.some((subChild) => currentPageMatch === removeSlashes(localizePath(subChild.url)))),
      }
    }),
  }
})
---

<nav aria-labelledby="grid-left" class="menu-nav">
  <ul id="mobile-menu" class="nav-groups">
    <li style="margin: 0; padding-bottom: 0;">
      <div class="nav-group">
        <h2 class="nav-group-title">Navigation</h2>
        <ul>
          {
            MENU.en.map((child) => (
              <li class="nav-link">
                <a href={`${child.link}`}>{child.text}</a>
              </li>
            ))
          }
        </ul>
      </div>
    </li>
  </ul>
  <hr class="menu-separator" />
  <ul class="nav-groups sidebar-nav-groups">
    {
      processedSidebarSections.map((section) => (
        <li>
          <div class="nav-group">
            <h2 class="nav-group-title">{section.section}</h2>
            <ul>
              {!!section.contents &&
                section.contents.map((child) => (
                  <>
                    <li class={`nav-link ${child.open ? "open" : ""}`}>
                      <a
                        href={isExternal(child.url) ? `${child.url}` : localizePath(child.url)}
                        target={isExternal(child.url) ? "_blank" : "_self"}
                        aria-current={`${child.isCurrent ? "page" : "false"}`}
                        class="flex align-center justify-between width-full"
                      >
                        <span>
                          {child.title}
                          {isExternal(child.url) && (
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              width="10"
                              height="11"
                              viewBox="0 0 10 11"
                              fill="none"
                            >
                              <g clip-path="url(#clip0_2084_4329)">
                                <path
                                  d="M9 1.5V8.36538L7.83812 7.2035V3.46385C5.46463 5.76924 3.29542 8.27999 0.853849 10.5L0 9.66344C2.42536 7.44344 4.5762 4.96728 6.93347 2.6781H3.31272L2.13462 1.5H9Z"
                                  fill="currentColor"
                                />
                              </g>
                              <defs>
                                <clipPath id="clip0_2084_4329">
                                  <rect width="10" height="10" fill="white" transform="translate(0 0.5)" />
                                </clipPath>
                              </defs>
                            </svg>
                          )}
                        </span>
                        {!!child.children && <Icon name="right-caret" class="caret" size="1.25rem" />}
                      </a>
                    </li>
                    {!!child.children && (
                      <ul>
                        {child.children.map((childItem) => (
                          <li class="nav-link nested">
                            <a
                              href={isExternal(childItem.url) ? childItem.url : localizePath(childItem.url)}
                              target={isExternal(child.url) ? "_blank" : "_self"}
                              aria-current={`${
                                currentPageMatch === removeSlashes(localizePath(childItem.url)) ? "page" : "false"
                              }`}
                            >
                              {childItem.title}
                              {isExternal(childItem.url) && (
                                <img
                                  src="/assets/icons/external-link.svg"
                                  alt="external link"
                                  style="width:12px; height: 12px"
                                />
                              )}
                            </a>
                          </li>
                        ))}
                      </ul>
                    )}
                  </>
                ))}
            </ul>
          </div>
        </li>
      ))
    }
  </ul>
</nav>

<script is:inline>
  window.addEventListener("DOMContentLoaded", (event) => {
    var target = document.querySelector('[aria-current="page"]')
    if (target && target.offsetTop > window.innerHeight - 100) {
      document.querySelector(".sidebar-nav-groups").scrollTop = target.offsetTop
    }
  })
</script>

<style>
  .menu-separator {
    width: calc(100vw - 40px);

    @apply border-0 border-t-[1px] border-solid border-black dark:border-white-800;
  }
  .sidebar-nav-groups.nav-groups > :first-child {
    @apply pt-[15px];
  }
  .menu-nav {
    width: 100%;
  }

  .nav-groups {
    height: 100%;
    padding: 2rem 0;
    overflow-x: visible;
    overflow-y: auto;
    max-height: 100vh;
  }

  .nav-groups > li + li {
    margin-top: 1.8rem;
  }

  .nav-groups > :first-child {
    @apply pt-doc;
  }

  .nav-groups > :last-child {
    padding-bottom: 2rem;
    @apply mb-navbar;
  }

  .nav-group-title {
    font-size: 16px;
    font-weight: 600;
    /* padding: 0.1rem 1rem; */
    padding: 0.1rem 0;
    margin-bottom: 0.6rem;
  }

  .nav-link a {
    margin: 1px;
    /* padding: 0.3rem 1rem; */
    font: inherit;
    color: inherit;
    text-decoration: none;
    display: flex;
    font-size: 16px;
    /* line-height:1; */
    margin-bottom: 10px;
    font-weight: 500;
    justify-content: space-between;
    align-items: center;
  }

  .nav-link a span {
    font-size: inherit;
    font-weight: inherit;
    color: inherit;
    line-height: inherit;
  }

  .nav-link a:hover,
  .nav-link a:focus {
    /* @apply bg-bg-hover; */
    /* background-color: var(--orange-100);  */
    color: var(--orange-500);
  }

  .nav-link a[aria-current="page"] {
    font-weight: 600;
    color: var(--orange-500);
    /* background-color: var(--orange-100);  */
    /* @apply text-accent bg-bg-accent; */
  }

  :global(:root.theme-dark) .nav-link a[aria-current="page"] {
    color: hsla(var(--color-base-white), 100%, 1);
  }

  .nav-link + ul {
    display: none;
  }

  .caret {
    transition: transform 0.2s ease-in-out;
    flex-shrink: 0;
  }

  .nav-link.open .caret {
    transform: rotateZ(90deg);
  }

  .nav-link.open + ul {
    display: block;
    border-left-width: 1px;
    border-left-style: solid;
  }

  .nested {
    @apply pl-5;
  }

  @media (min-width: 50em) {
    #mobile-menu,
    .menu-separator {
      display: none;
      height: 0;
    }
    .nav-groups {
      padding: 0;
    }
    .sidebar-nav-groups.nav-groups > :first-child {
      @apply pt-doc;
    }
    .nav-link a {
      font-weight: 400;
    }
  }
</style>

<style is:global>
  .mobile-sidebar-toggle .menu-nav {
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .mobile-sidebar-toggle #mobile-menu {
    height: auto;
    overflow-y: unset;
  }

  .mobile-sidebar-toggle .sidebar-nav-groups {
    flex: 1;
    height: unset;
  }
</style>
